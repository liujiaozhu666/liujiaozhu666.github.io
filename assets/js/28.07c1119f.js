(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{311:function(n,v,_){"use strict";_.r(v);var p=_(17),e=Object(p.a)({},(function(){var n=this,v=n.$createElement,_=n._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("p",[n._v("1、 计算机只能识别二进制")]),n._v(" "),_("p",[n._v("2、计算机中最小的数据单位是 bit(位) 最基本的数据单位是 byte (字节)")]),n._v(" "),_("pre",[_("code",[n._v("  1byte = 8 bit\n\n  在存储器中最小的存储单位是存储元\n\n  存储元 它的作用是用来存放一位二进制代码0或1\n")])]),n._v(" "),_("p",[n._v("3、byte 占用 8位  0000 0000")]),n._v(" "),_("pre",[_("code",[n._v(" 这8位 分为符号位（最高位 也就是第一位）和数值位 (后7位)\n\n java中基本数据都是有符号位的 char是无符号位 所以范围是0~65535\n\n java中 byte b = 1 和 byte b = -1 都是可以的 \n\n C语言中将基本数据类型分为 有符号位(signed) 和 无符号位(unsigned)\n\n C语言中 char b = -1 其实是 signed char b = -1\n\n C语言 要定义0 和正数 unsigned char b = 1 \n\n 最高位 0 表示 正数 1表示 负数\n\n 如果是 0111 1111 就为 127 那么 1111 1111 就是 -127\n\n 如果8位都是0000 0000 就是 0\n\n 那么推理出来 1000 0000 就是 -0\n\n 计算机底层定义了 +0 就是 0000 0000\n\n 那么出来个 -0 怎么表示 ？？？-0 和 0 不都是0 ？？？\n\n 0000 0000 和 1000 0000都表示0的话，那么就太浪费资源了\n\n 那么为了不浪费资源 0000 0000 就是0 \n\n 1000 0000 是 -0 就代表 -128\n\n 可是为什么？凭什么？- 0 就要代表 -128？？？\n")])]),n._v(" "),_("p",[n._v("4、计算机基础知识科普：源码、反码、补码")]),n._v(" "),_("pre",[_("code",[n._v(" 计算机存放有符号位的整数都是都是存放它的补码\n\n 正数的源码、反码、补码都是一样的\n\n 比如: 10这个数字 在计算机中怎么表示存储\n\n 10 是正数符号位是0\n\n 10的二进制就是 0000 1010  \n\n 源码: 0000 1010\n\n 反码: 0000 1010\n\n 补码: 0000 1010\n\n 那么负数怎么表示？\n\n -10 的二进制\n\n源码: 1000 1010\n\n反码: 1111 0101   (符号位不变 其余位 取反)\n\n补码: 1111 0110   ( 反码 + 1 就是 补码 )\n")])]),n._v(" "),_("p",[n._v("计算机中只存放 补码")]),n._v(" "),_("p",[n._v("那么为什么计算机中要存放补码？")]),n._v(" "),_("p",[n._v("因为计算机只会做加法运算，减去一个数字 相当于加上数字的补码")]),n._v(" "),_("p",[n._v("比如: 在我们生活中 凌晨 02:00 和下午 14:00 其实都是两点")]),n._v(" "),_("p",[n._v("时针和分针指向都一样 （你品 你细品 是不是一回事...）")]),n._v(" "),_("p",[n._v("10 - 8 = 2")]),n._v(" "),_("p",[n._v("10 + 4 = 14")]),n._v(" "),_("p",[n._v("10点钟的时候时针往后划拉 8圈 就是 2点，往前划拉 4圈就是 14点")]),n._v(" "),_("p",[n._v("但都是 两点 所以 -8 和 +4 效果是一样的")]),n._v(" "),_("p",[n._v("-8运算可以使用 +4 运算代替 我们把8 和4称为 互为补码")]),n._v(" "),_("p",[n._v("也就是 减去一个数字 相当于加上这个数字的补码")]),n._v(" "),_("p",[n._v("5、那么还是原问题 -128 为什么 使用-0 也就是 1000 0000表示")]),n._v(" "),_("p",[n._v("byte 是占8位 无符号位的话 1000 0000 是128")]),n._v(" "),_("p",[n._v("有符号位的话 byte是无法表示 -128和128")]),n._v(" "),_("p",[n._v("那么如果假设 byte是占 9位 -128 就是 1 1000 0000 表示")]),n._v(" "),_("p",[n._v("-128 源码：1 1000 0000")]),n._v(" "),_("p",[n._v("-128 反码：1 0111 1111")]),n._v(" "),_("p",[n._v("-128 补码：1 1000 0000")]),n._v(" "),_("p",[n._v("它的 源码和补码是一样的 -128补码的 后八位 刚好是 1000 0000")]),n._v(" "),_("p",[n._v("6、其实 1000 0000 代表-128 就是人为设计的 为了不浪费资源")]),n._v(" "),_("p",[n._v("（听闻是印度阿三设计的）这种设计也很巧妙")]),n._v(" "),_("p",[n._v("比如: 127 + 1 = -128")]),n._v(" "),_("pre",[_("code",[n._v("     0111 1111\n\n   + 0000 0001 \n\n     1000 0000 = -128\n\n     -128 + 1 = -127\n\n     -128 补码是 1111 1110\n\n     1111 1110\n\n   + 0000 0001\n\n     1111 1111 = -127\n")])]),n._v(" "),_("p",[n._v("这样从-128~127的反码首尾相连,形成了一个闭环，就像时钟一样")])])}),[],!1,null,null,null);v.default=e.exports}}]);