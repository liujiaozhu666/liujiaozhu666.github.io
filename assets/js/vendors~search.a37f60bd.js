(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,i,_){"use strict";_.r(i),i.default=[{title:"【读书笔记】html",path:"/posts/html.html",strippedContent:' ## html标签    > 块级标签  >  > 会自动换行的叫做块级标签  >  > 行级标签  >  > 在同一行显示的叫做行级标签  >    ------    ### 标题标签    ```html  <h1>标题</h1>  <h2>标题</h2>  <h3>标题</h3>  <h4>标题</h4>  <h5>标题</h5>  <h6 align="center">标题</h6>  ```  | 属性名 |         值          |   备注   |  | :----: | :-----------------: | :------: |  | align  | left、center、right | 对齐方式 |    ------    ### 段落标签    ```html  <p align="center">  \t飞雪连天射白鹿,笑书神侠倚碧鸳。  </p>  <p align="right">  \t飞雪连天射白鹿,笑书神侠倚碧鸳。  </p>  ```    | 属性名 |         值          |   备注   |  | :----: | :-----------------: | :------: |  | align  | left、center、right | 对齐方式 |    ------        ### 水平线标签    ```html  <hr />  ```    | 属性名  |   值    |   备注   |  | :-----: | :-----: | :------: |  |  width  |  数字   | 线的宽度 |  | height  |  数字   | 线的高度 |  |  color  | 字符串  |   颜色   |  | noshade | noshade | 取消阴影 |    ------    ### 超链接标签    ```html  <a href="地址">超链接</a>  ```    |  属性  |      值       |      备注      |  | :----: | :-----------: | :------------: |  |  href  | 网址/本地路径 |    跳转地址    |  | target |    _blank     | 新窗口打开页面 |        ------    ### 图片标签    ```html  <img src="路径" alt="文字" />  ```    |  属性  |                    值                    |            备注            |  | :----: | :--------------------------------------: | :------------------------: |  |  src   |            网络地址/本地路径             |          图片地址          |  |  alt   |                  字符串                  | 图片无法显示时，提示的文字 |  | title  |                  字符串                  |   鼠标停留时,提示的文字    |  | border |                   数字                   |           边框线           |  | align  | top、left、right、center、middle、bottom | 图文混排时 图文的显示方式  |        ----        ### 列表标签    #### 无序列表       ul 无序列表标签    li 列表项    ```html  <ul type="square">  \t<li>无序列表</li>  \t<li>无序列表</li>  \t<li>无序列表</li>  </ul>  ```    | 属性名 |             值             |   备注   |  | :----: | :------------------------: | :------: |  |  type  | disc(默认)、square、circle | 列表类型 |    ------        #### 有序列表    ol 有序列表标签    li 列表项    ```html  <ol type="a">  \t<li>有序列表</li>  \t<li>有序列表</li>  \t<li>有序列表</li>  </ol>  ```    | 属性名 |         值          |     备注     |  | :----: | :-----------------: | :----------: |  |  type  | 1(默认)、A、a、i、I | 列表符号类型 |          #### 自定义列表(描述)    dl 自定义列表       dt 自定义列表的标题       dd 列表项    ```html  <dl>  \t<dt>自定义标题</dt>  \t<dd>自定义列表</dd>  \t<dd>自定义列表</dd>  </dl>  ```          #### 列表使用场景    1. 导航栏  2. 网页布局  3. 轮播图  4. 标签页    --------        ### div 和 span 标签    #### div    ​\t块级元素    #### span    ​\t行级元素    ------        ### 表格标签    #### 规则表格       thead 表头 一般不写    tbody 表体  一般不写 但是浏览器会自动生成    tfoot  表尾  一般不写    caption 表格的标题    table  表格    tr 行    td 列\t\t    th 是表头 仅限于在表格的第一行 有字体加粗 水平居中效果        ``` html  <table          width="100%"          cellspacing="0"          cellpadding="0"          border="1"          bgcolor="#F0F"         background="图片路径"         >  \t<caption>标题</caption>      <thead>      \t<tr>      \t\t<th>表头单元格1</th>          \t<th>表头单元格2</th>     \t\t</tr>      </thead>      <tbody>      \t<tr>          \t<td>单元格1</td>              <td>单元格2</td>          </tr>      </tbody>      <tfoot>      \t<tr>          \t<td>单元格1</td>              <td>单元格2</td>          </tr>      </tfoot>  </table>  ```            |   属性名    |         值          |                备注                |  | :---------: | :-----------------: | :--------------------------------: |  |    width    |     数字/百分比     |           设置表格的宽度           |  |   height    |        数字         |           设置表格的高度           |  |   border    |        数字         |           设置表格的边框           |  | cellspacing |        数字         | 设置单元格与单元格之间的间隙(填充) |  | cellpadding |        数字         | 设置单元格与单元格内容的间隙(填充) |  |   bgcolor   |        颜色         |           设置表格背景色           |  | background  |        路径         |           设置表格背景图           |  |    align    | left、center、right |        设置表格水平对齐方式        |  |   valign    | top、middle、bottom |        设置表格垂直对齐方式        |        #### 不规则表格    ​    要合并的 td 在同一个tr中  叫 列合并 （colspan）    ​\t要合并的 td 不在同一个tr中叫行合并 （rowspan）    #### 表格使用场景    1. 网页布局(老项目)  2. 展示数据        #### 练习题    1. 使用规则表格制作班级信息统计表  2. 使用不规则表格制作个人简历        ### form表单    #### 什么是表单    比如 去银行办理业务需要填写表格    表单就是为了收集用户的信息    ``` html  属性 :  action : 数据要提交的页面  method：数据提交的方式  默认是 get  get 和 post 有什么区别?  get 是不安全的 提交的数据量小   post 安全的 数据量没有限制的  ```     #### input标签    ``` html  \x3c!-- 所有内容都必须在 form 标签内 --\x3e  <form>   \t<input type="password" name="password" placeholder="提示信息" required />  \t<input type="number" name="age" placeholder="年龄" min="0" max="100" step="1" />  </form>  ```    oninvalid="setCustomValidity(\' 内容不符合时 提示的信息 \')"   oninput="setCustomValidity(\'\')"     |    属性     |    值    |                  备注                  |  | :---------: | :------: | :------------------------------------: |  | placeholder |  字符串  |                提示信息                |  |    type     |   text   |                 文本框                 |  |    type     | password |               密码输入框               |  |    type     |  radio   |        单选按钮(name取值要一致)        |  |    type     | checkbox |                 复选框                 |  |    type     |  submit  |                提交按钮                |  |    type     |  reset   |                重置按钮                |  |    type     |  button  |                普通按钮                |  |    type     |  image   |         (src="路径")  图片按钮         |  |    type     |   file   |                 文件域                 |  |    type     |  range   |                 滑动块                 |  |    type     |   date   |                日期时间                |  |    type     |  email   |                邮箱验证                |  |    type     |   url    |                网址验证                |  |    type     |  number  |                验证数字                |  |   checked   | checked  |     默认被选中（单选和复选有作用）     |  |  maxlength  |   数字   |                最大长度                |  |    size     |   数字   |              输入框的大小              |  |  readonly   | readonly | 只读模式（可以获得焦点，数据可以提交） |  |  disabled   | disabled | 禁用模式（不能获得焦点，数据无法提交） |  |    value    |  字符串  |            给input设置内容             |  |  required   | required |                 必填项                 |  |     max     |   数字   |              最大取值范围              |  |     min     |   数字   |                最小范围                |  |    step     |   数字   |        步长 （加 或 减的数字）         |      #### 下拉框（下拉菜单）    ```html  <select name="mySelect" multiple>  \t<option value="选项1">选项1</option>  \t<option value="选项2">选项2</option>  </select>  ```    |   属性   |    值    |    备注    |  | :------: | :------: | :--------: |  | multiple | multiple |  实现多选  |  |  value   |  字符串  | 实际选项值 |  | selected | selected |   默认值   |    #### 多行文本输入框    ```html  <textarea cols="5" rows="5"></textarea>  ```    | 属性  |   值   |        备注        |  | :---: | :----: | :----------------: |  | cols  |  数字  | 设置多行文本框的列 |  | rows  |  数字  | 设置多行文本框的行 |  | value | 字符串 |    多行文本框的    |    ----    ### frameset框架    ```html  <frameset cols="30%,*">  \t<frame />  \t<frame />  </frameset>  ```    | 属性        | 值       | 备注               |  | ----------- | -------- | ------------------ |  | cols        | 百分比   | 设置有几列         |  | rows        | 百分比   | 设置有几行         |  | frameborder | 数字     | 设置边框线         |  | noresize    | noresize | 是否可以拖动边框线 |      '},{title:"【读书笔记】CSS",path:"/posts/CSS.html",strippedContent:' # CSS    ## 什么是CSS    ​    CSS 是 Cascading Style Sheet    ​\t层叠样式表       作用: 美化网页  比如 加字体颜色 字体样式 背景图    ​\tcss的优点    ​\t丰富的修饰样式    ​\t内容与修饰分离，利于项目开发    ​\t实现样式复用，提高开发效率    ​\t实现页面的精确控制        ## CSS基本语法    选择器{    ​\t属性1：属性值1;    ​\t属性2：属性值2；    ​\t属性3：属性值3;    ​\t.......    }    添加注释的作用就是为了提高代码的 可读性    ---    ## 样式的三种书写方式    1. 外部引入样式表       ```html     <link rel="stylesheet" href="css文件路径" />     or     <style>         导入 外部样式表     \t@import url("css/index.css");     </style>     ```    2. 内嵌（内部）样式       ```html     <head>     \t<style type="text/css">     \t\t     \t</style>     </head>     ```    3. 行内样式       ```html     <p style="color: #F00;font-size:40px;">     \t飞雪连天射白鹿,笑书神侠倚碧鸳。     </p>     ```       ### 三种书写方式优先级          行内样式  >  内部  > 外部样式    ## css选择器    1. 类选择器       ```html     <style>     .abc{     }     </style>          <div class="abc">     \tdiv标签     </div>          有class 那么选择器就要以 . 开头     class 的类名 可以重复使用     ```    2. ID选择器       ```html     <style>     #abc{     }     </style>          <div id="abc">     \tdiv标签     </div>          有id 那么选择器就要以 # 开头     id的类名 不可以重复使用     ```    3. 标签选择器       ```css     <style>     div{     }     </style>          <div>     \tdiv标签     </div>          标签是什么名字 那么选择器就要以什么 开头     ```       ## 选择器的优先级       ID  >  Class  >  Tag（标签）       ----            ## 常用的CSS样式       ### 字体    | 样式名      | 值                                | 备注           |  | ----------- | --------------------------------- | -------------- |  | font-size   | 数字（单位px）                    | 设置字体大小   |  | font-family | 字符串 字体（当前计算机要有字体） | 设置字体的类型 |  | color       | 单词/16进制/rgb                   | 设置字体的颜色 |  | font-weight | 100-900 / bold                    | 设置字体的粗细 |              ### 文本    |     样式名      |                   值                    |                        备注                        |  | :-------------: | :-------------------------------------: | :------------------------------------------------: |  |   line-height   |                  数字                   | 设置行与行之间的距离(通常搭配height是文字垂直居中) |  |   text-align    |           left、center、right           |                 设置文本的对齐方式                 |  | letter-spacing  |              数字(单位px)               |              设置字体与字体之间的填充              |  | text-decoration | line-through、underline、overline、none |                设置字体的线如何显示                |           ## 盒子模型    什么是盒子模型？    所有标签都是盒子    一个盒子的宽度 = 内容 + 外边距 + 边框线 + 内边距        盒子的宽度 = 内容 + padding-left +     ​\t\t\t\t\t\tbrorder-left + margin-left +     ​\t\t\t\t\t\tpadding-right + border-right +     ​\t\t\t\t\t\tmargin-right;    ## 边框样式    ### border    ```html  <style>      div{          /* 第一种写法 */          border:1px solid red;                    /* 第二种写法 */          border-width:2px;          border-color:red;          border-style:solid;                    /*第三种写法*/          border-top:2px solid red;                }  </style>    <div>      border  </div>  ```        ### border-radius    ```html    <style>      div{          border-radius:10px;                    border-top-left-radius: 50px;          border-bottom-right-radius: 50px;      }  </style>  <div></div>  ```        ### 边框线和边框圆角应用场景    1. 按钮  2. 气泡效果（圆角+定位）        ## 列表样式    | list-style-type     | 列表类型       |  | ------------------- | -------------- |  | list-style-image    | 列表的图片     |  | list-style-position | 列表的位置     |  | list-style          | 列表类型的简写 |    ### 使用场景    1. 导航栏    ## 背景和阴影    | background-color    | **用于设置元素的背景颜色**       |  | ------------------- | -------------------------------- |  | background-image    | 用于设置元素的背景图片           |  | background-repeat   | 用于设置元素的背景图片重复方式   |  | background-position | 用于设置元素的背景图片位置       |  | background-size     | 用于设置元素的背景图片大小       |  | background          | 复合属性，用于设置元素的背景效果 |    #### 渐变    ##### 线性渐变    ##### 经性渐变    ##### 重复性渐变    ------    #### 阴影    ##### 文本阴影    text-shadow: 上下，左右，模糊度，颜色    ##### 盒子阴影    box-shadow:上下，左右，模糊度，颜色        隐藏页面元素的方式    3种    1. overflow:hidden  超出 溢出 不占位置  2. display:none        显示方式不显示  不占位置  3. visibility: hidden  透明度 占位置'},{title:"【读书笔记】byte的取值范围为什么是-128~127？",path:"/posts/byte%E7%9A%84%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4.html",strippedContent:" 1、 计算机只能识别二进制    2、计算机中最小的数据单位是 bit(位) 最基本的数据单位是 byte (字节)          1byte = 8 bit              在存储器中最小的存储单位是存储元              存储元 它的作用是用来存放一位二进制代码0或1    3、byte 占用 8位  0000 0000         这8位 分为符号位（最高位 也就是第一位）和数值位 (后7位)             java中基本数据都是有符号位的 char是无符号位 所以范围是0~65535             java中 byte b = 1 和 byte b = -1 都是可以的              C语言中将基本数据类型分为 有符号位(signed) 和 无符号位(unsigned)             C语言中 char b = -1 其实是 signed char b = -1             C语言 要定义0 和正数 unsigned char b = 1              最高位 0 表示 正数 1表示 负数             如果是 0111 1111 就为 127 那么 1111 1111 就是 -127             如果8位都是0000 0000 就是 0             那么推理出来 1000 0000 就是 -0             计算机底层定义了 +0 就是 0000 0000             那么出来个 -0 怎么表示 ？？？-0 和 0 不都是0 ？？？             0000 0000 和 1000 0000都表示0的话，那么就太浪费资源了             那么为了不浪费资源 0000 0000 就是0              1000 0000 是 -0 就代表 -128             可是为什么？凭什么？- 0 就要代表 -128？？？    4、计算机基础知识科普：源码、反码、补码         计算机存放有符号位的整数都是都是存放它的补码             正数的源码、反码、补码都是一样的             比如: 10这个数字 在计算机中怎么表示存储             10 是正数符号位是0             10的二进制就是 0000 1010               源码: 0000 1010             反码: 0000 1010             补码: 0000 1010             那么负数怎么表示？             -10 的二进制            源码: 1000 1010            反码: 1111 0101   (符号位不变 其余位 取反)            补码: 1111 0110   ( 反码 + 1 就是 补码 )    计算机中只存放 补码    那么为什么计算机中要存放补码？    因为计算机只会做加法运算，减去一个数字 相当于加上数字的补码    比如: 在我们生活中 凌晨 02:00 和下午 14:00 其实都是两点    时针和分针指向都一样 （你品 你细品 是不是一回事...）    10 - 8 = 2    10 + 4 = 14    10点钟的时候时针往后划拉 8圈 就是 2点，往前划拉 4圈就是 14点    但都是 两点 所以 -8 和 +4 效果是一样的    -8运算可以使用 +4 运算代替 我们把8 和4称为 互为补码    也就是 减去一个数字 相当于加上这个数字的补码    5、那么还是原问题 -128 为什么 使用-0 也就是 1000 0000表示    byte 是占8位 无符号位的话 1000 0000 是128    有符号位的话 byte是无法表示 -128和128    那么如果假设 byte是占 9位 -128 就是 1 1000 0000 表示    -128 源码：1 1000 0000     -128 反码：1 0111 1111    -128 补码：1 1000 0000     它的 源码和补码是一样的 -128补码的 后八位 刚好是 1000 0000    6、其实 1000 0000 代表-128 就是人为设计的 为了不浪费资源    （听闻是印度阿三设计的）这种设计也很巧妙    比如: 127 + 1 = -128             0111 1111               + 0000 0001                  1000 0000 = -128                 -128 + 1 = -127                 -128 补码是 1111 1110                 1111 1110               + 0000 0001                 1111 1111 = -127    这样从-128~127的反码首尾相连,形成了一个闭环，就像时钟一样    "},{title:"【项目实战】weui+vue+axios",path:"/posts/weui.html",strippedContent:' ```  1、WeUI 是一套同微信原生视觉体验一致的基础样式库，  由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。  2、使用 vue 中 v-for循环 渲染数据  3、axios是基于promise（诺言）用于浏览器和node.js是http客户端。  \taxios的作用是什么呢：axios主要是用于向后台发起请求的，  \t还有在请求中做更多是可控功能。  **特点**  \t支持浏览器和node.js  \t支持promise  \t能拦截请求和响应  \t能转换请求和响应数据  \t能取消请求  \t自动转换JSON数据  \t浏览器支持防止CSRF（跨站请求伪造）    promise是什么：  是一个对象用来传递异步操作的信息，它代表了某个未来才会知道结果的事件（通常是一个异步操作），  并且这个事件提供统一的api，可供进一步的处理。    promise的作用：  Promise的出现主要是解决地狱回调的问题，比如你需要结果需要请求很多个接口，  这些接口的参数需要另外那个的接口返回的数据作为依赖，这样就需要我们一层嵌套一层，  但是有了Promise 我们就无需嵌套。    promise的本质是什么：分离异步数据获取和业务  ```    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=b08262u0nf2" allowFullScreen="true"></iframe>  '},{title:"【读书笔记】javascript中this的指向",path:"/posts/js%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91.html",strippedContent:' > 首先必须要说的是，this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象（这句话有些问题，后面会解释为什么会有问题，虽然网上大部分的文章都是这样说的，虽然在很多情况下那样去理解不会出什么问题，但是实际上那样理解是不准确的，所以在你理解this的时候会有种琢磨不透的感觉），那么接下来我会深入的探讨这个问题。      例子1：    ```javascript  function a(){          \tvar user = "liujiaozhu";      \tconsole.log(this.user);//undefined       console.log(this);//Window    }  a();  ```    按照我们上面说的this最终指向的是调用它的对象，这里的函数a实际是被Window对象所点出来的，下面的代码就可以证明。    ```javascript  function a(){          \tvar user = "liujiaozhu";      \tconsole.log(this.user); //undefined         console.log(this);//Window  }  window.a();  ```    其实 alert 也是 window 的一个属性，也是window点出来的。      例子2：    ```javascript  var obj = {      \tuser:"liujiaozhu",      \tfn:function(){          \t\tconsole.log(this.user);            \t\t//liujiaozhu          \t  \t}  }  obj.fn();  ```    > 这里的this指向的是对象obj，因为你调用这个fn是通过obj.fn()执行的，那自然指向就是对象obj，这里再次强调一点，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。  >    其实例子1和例子2说的并不够准确，下面这个例子就可以推翻上面的理论。    如果要彻底的搞懂this必须看接下来的几个例子      例子3：    ```javascript  var obj = {      \tuser:"liujiaozhu",      \tfn:function(){          \t\tconsole.log(this.user);           \t\t//liujiaozhu          \t  \t}  }  window.obj.fn();  ```    > 这段代码和上面的那段代码几乎是一样的，但是这里的this为什么不是指向window，如果按照上面的理论，最终this指向的是调用它的对象，这里先说个而外话，window 是 js 中的全局对象，我们创建的变量实际上是给window添加属性，所以这里可以用 window.obj 对象。  >  > 这里先不解释为什么上面的那段代码 this 为什么没有指向 window，我们再来看一段代码。  >    ```javascript  var obj = {      \ta:100,      \tb:{                  a:24,                  fn:function(){                          console.log(this.a);                           //24                       }      \t}  }  obj.b.fn();  ```        > 这里同样也是对象obj 点出来的，但是同样this并没有执行它，那你肯定会说我一开始说的那些不就都是错误的吗？其实也不是，只是一开始说的不准确，接下来我将补充一句话，我相信你就可以彻底的理解this的指向的问题。  >  > 　　情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window，但是我们这里不探讨严格版的问题，你想了解可以自行上网查找。  >  > 　　情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。  >  > 　　情况3：如果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象，例子3可以证明，如果不相信，那么接下来我们继续看几个例子。  >    ```javascript  var obj = {      \ta:100,      \tb:{                         \t\tfn:function(){              \t\t\tconsole.log(this.a);               \t\t\t//undefined                  \t\t}      \t}  }  obj.b.fn();  ```    尽管对象b中没有属性a，这个this指向的也是对象b，因为this只会指向它的上一级对象，不管这个对象中有没有this要的东西。    还有一种比较特殊的情况，    例子4：    ```javascript  var obj = {      \ta:100,      \tb:{                  a:24,                  fn:function(){                          console.log(this.a); //undefined               console.log(this); //window                  }           }   }  var j = obj.b.fn;  j();  ```    > 这里this指向的是window，是不是有些蒙了？其实是因为你没有理解一句话，这句话同样至关重要。  >  > 　　this永远指向的是最后调用它的对象，也就是看它执行的时候是谁调用的，例子4中虽然函数fn是被对象b所引用，但是在将fn赋值给变量 j 的时候并没有执行所以最终指向的是window，这和例子3是不一样的，例子3是直接执行了fn。  >  > 　　this讲来讲去其实就是那么一回事，只不过在不同的情况下指向的会有些不同，上面的总结每个地方都有些小错误，也不能说是错误，而是在不同环境下情况就会有不同，所以我也没有办法一次解释清楚，只能你慢慢地的去体会。  >    构造函数版this：    ```javascript  function Fn(){          \tthis.user = "liujiaozhu";  }  var a = new Fn();  console.log(a.user); //liujiaozhu  ```        > 这里之所以对象a可以点出函数Fn里面的user是因为new关键字可以改变this的指向，将这个this指向对象a，为什么我说a是对象，因为用了new关键字就是创建一个对象实例，理解这句话可以想想我们的例子3，我们这里用变量a创建了一个Fn的实例（相当于复制了一份Fn到对象a里面），此时仅仅只是创建，并没有执行，而调用这个函数Fn的是对象a，那么this指向的自然是对象a，那么为什么对象a中会有user，因为你已经复制了一份Fn函数到对象a中，用了new关键字就等同于复制了一份。    '},{title:"Now is ours",path:"/posts/video.html",strippedContent:' <iframe frameborder="0" width="100%"  height="500" src="https://v.qq.com/txp/iframe/player.html?vid=h1331odj8qv" allowFullScreen="true"></iframe>  '},{title:"【项目实战 1】AngularJs",path:"/posts/angular1.html",strippedContent:' # Angular介绍    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=w0781hesds1" allowFullScreen="true"></iframe>          '},{title:"【项目实战 3】AngularJs",path:"/posts/angular3.html",strippedContent:' # Angular/Cli 路由    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=b0781w9x1as" allowFullScreen="true"></iframe>  '},{title:"【项目实战 4】AngularJs",path:"/posts/angular4.html",strippedContent:' # 重构静态页面    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=h0781rtj0n8" allowFullScreen="true"></iframe>  '},{title:"【项目实战 2】AngularJs",path:"/posts/angular2.html",strippedContent:' # Angular/Cli    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=r078180r0dn" allowFullScreen="true"></iframe>  '},{title:"【项目实战 5】AngularJs",path:"/posts/angular5.html",strippedContent:' # 加载本地JSON文件    <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=a0781nh12mp" allowFullScreen="true"></iframe>  '},{title:"【项目实战 6】AngularJs",path:"/posts/angular6.html",strippedContent:' # 导航栏、渲染数据  ---  <iframe frameborder="0" width="100%" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=s07815f551f" allowFullScreen="true"></iframe>  '},{title:"【读书笔记】Gulp压缩js、css、img、html提高页面打开速度",path:"/posts/gulp%E4%BD%BF%E7%94%A8.html",strippedContent:" > **gulp**是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。  >  > 压缩 js、css、img、html 代码可降低文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。但如果js、css、html文件比较多时候，手动就比较麻烦，gulp这时候就可以派上用场了。  >        # 1. 全局安装 gulp    ```bash  npm install gulp -g  ```  ```bash  gulp是基于nodejs，理所当然需要先安装nodejs  全局安装是为了能够在cmd命令行中的任意目录中使用  npm安装插件是从国外服务器下载，受网络影响大，可能出现异常  淘宝团队为我们分享了国内镜像  命令提示符执行  npm install cnpm -g --registry=https://registry.npm.taobao.org    注意：安装完后最好查看其版本号  cnpm -v  或关闭命令提示符重新打开  注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm  ```    # 2.作为项目的开发依赖（devDependencies）安装：          ```bash  npm install gulp --save-dev  ```    在本地项目中局部安装gulp 在本地项目中使用需要gulp插件    在本地项目中安装如下：    ![img](/gulp-1.webp)      使用 gulp -v 可以查看gulp的版本号    ![img](/gulp-2.webp)        # 3.新建一个package.json    > package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件  >  > **注意：json文件内是不能写注释的**  >  > **这就是 json文件**    ![img](/gulp-3.webp)    > 前三项是必填  >  > name: 项目名  >  > version：项目的版本号  >  > descrption：项目描述  >  > 其他可以不填  >  > 当然这个文件我们可以让它自动生成  >  > 使用 npm init   > 前三项必填 后面直接回车跳过  >  > 最后is this OK？输入 y 回车  >    ![img](/gulp-4.webp)    此时项目的根目录会自动新建一个package.json文件        # 4.新建gulpfile.js 文件（必须这个名字）    gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）    我们先来压缩项目中所有的js文件    在 gulpfile.js 中写入以下代码        ![img](/gulp-5.webp)        在项目根目录 shift + 右键    ![img](/gulp-6.webp)    # 5. 压缩 js文件   >  > 在命令行输入 gulp script   >  > 不出意外会报错 是说压缩js的模块 gulp-uglify 找不到  >  > // 获取 uglify 模块（用于压缩 JS）  >  > var uglify = require('gulp-uglify')  >  > 虽然我们加载了模块但是本地中没有该模块 需要下载  >  > 使用 命令  下载模块    ```bash  npm install gulp-uglify  ```    ![img](/gulp-7.webp)        下载完成    ![img](C:\\Users\\Administrator\\Desktop\\vuepress\\vuepress-theme-indigo-material\\docs\\.vuepress\\public\\gulp-8.webp)    然后在 运行     ```bash  gulp script   ```    ![img](/gulp-9.webp)    OVER！！！    此时项目根目录中会多个dist文件夹 里面有个 js 文件夹 存放了 所有压缩过的js文件    # 6. 压缩css文件    然后我们压缩 css文件    在 gulpfile.js 中先加载 压缩 css 的 gulp-minify-css 模块    ```javascript  // 获取 minify-css 模块（用于压缩 CSS）   var minifyCSS = require('gulp-minify-css')    // 压缩 css 文件  // 在命令行使用 gulp css 启动此任务  gulp.task('css', function () {    // 1. 找到文件    gulp.src('css/*.css')      // 2. 压缩文件      .pipe(minifyCSS())    // 3. 另存为压缩文件      .pipe(gulp.dest('dist/css'))  })  ```        在cmd命令行输入    ```bash   gulp css   ```    如果报错 就 安装模块    ```bash  npm install gulp-minify-css   ```    执行     ```bash  gulp css   ```        # 7. 压缩html文件    ```bash  npm install gulp-minify-html   ```    下载 压缩html的模块    ```javascript  // 压缩html插件    var minifyHTML = require('gulp-minify-html');    // 压缩html文件    // 在命令行使用 gulp htmlpage 启动此任务    gulp.task('htmlpage', function() {     gulp.src('./*.html')      .pipe(minifyHTML())      .pipe(gulp.dest('./dist'));    });    // 执行 gulp htmlpage  ```    # 8. 最后压缩图片    ```javascript    // 压缩图片插件    var image = require('gulp-imagemin');  // 压缩图片文件  // 在命令行输入 gulp image 启动此任务  gulp.task('images', function() {   gulp.src('./images/*')    // 压缩    .pipe(image())    // 保存    .pipe(gulp.dest('./dist/images'));  });  ```    所有文件压缩完后 存在一个问题 就是    在前面的那些任务当中，当你只修改其中一个文件的话，其实所有的文件都会被重新编译一次。当编译的文件比较多的时候，所需要的时间就会大大增加。这时候，我们就要用到一个新的插件 gulp-changed.    ```bash  npm install --save-dev gulp-changed  ```    > 需要在 gulpfile.js 中加载  >  > // 检测更新单个文件插件  >  > var changed = require('gulp-changed');  >  > 这里以压缩js为例 其他按照更改即可  >    ![img](/gulp-10.webp)    # 9. 自动监听文件并压缩    > 最后一个问题就是每次改完源文件 都需要 手动去 执行 压缩文件  >  > gulp script  >  > gulp css  >  > gulp htmlpage  >  > gulp images  >  > 任务太多 手动执行命令效率太低  >  > 我们可以让 gulp 自动监听 并压缩所更改的文件  >    ![img](/gulp-11.webp)    把这些任务都监听后，我们要做的就是输入命令运行：    ```bash  gulp  ```    ![img](/gulp-12.webp)    这样我们文件有修改，就会自动运行"},{title:"C语言学习笔记",path:"/posts/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0.html",strippedContent:' ## 选择题    ```C  1.下面的四个选项中，合法的用户标识符的选项是( )      A. while       B. goto    C. 2ab     D. a123  2．有输入语句：scanf(“a=%d, b=%d, c=%d”, &a, &b, &c);     为使变量a,b,c的值分别为1，3，2从键盘上输入数据的正确形式应当是( )      A.132 〈回车〉         B.a=1,b=3,c=2〈回车〉       C.a=1 b=3 c=a <回车>      D.1，3，2 〈回车〉  3．如果输入信息为：1234567  则执行语句：scanf("%2d%2d",&x,&y);  之后，     x,y的值为(  )  \tA. x为12,y为34         B. x为2,y为3      C. x为12,y为67         D.x为1234567,y为0  4．对于 for(表达式1；表达式2 ；表达式3) 语句的正确描述 (  )      A．表达式２省略，循环不执行。      B．表达式３省略，可在循环体中修改循环控制变量，以保证正常退出。      C．三个表达式均不能省略。      D．三个表达式均不能省略。但分号可以省略。  5．以下叙述中正确的是(  )。      A．循环语句嵌套必须是同类型的语句      B．循环语句嵌套可以是同类型的语句，也可以不同类型      C．do_while循环语句和 while循环语句的程序执行方式都是相同的。      D．循环体中不能再有循环语句  6．有下面的程序段:      char a[ 3 ], b[ ] =”student”;      a=b;      printf (“ %s”,a);      则( )      A.运行后将输出student ;      C.运行后将输出b;       B.运行后将输出a         D.编译出错   7.当数组作函数参数时，选出不正确的描述。( )     A．实参数组与形参数组类型应一致。     B．数组元素做函数实参时，同变量做实参一样是参数传值。     C．形参数组可以不定义数组大小。     D．实参数组与形参数组大小必须一致，否则Ｃ编译会检查出错  8．在C语言中，函数返回值的类型最终取决于(  )。      A．函数定义时在函数首部所说明的函数类型      B．return语句中表达式值的类型      C．调用函数时主调函数所传递的实参类型      D．函数定义时形参的类型  9．以下对二维数组a的正确说明是 ( )      Ａ. int a[ 3 ] [ ];      B. float a( 3, 4);        C. int a[ 3 ] [ 4 ]      D.float a( 3, )( 4 );   10.表达式 printf(“%d”,10 % -3) 运行结果为(  )      A.1  B.-1  C.3   D. -3  11．C语言中，要求运算数必须都是整数的运算符是（ ）。      A.*       B.-       C.%     D.+  12．设fp为指向某二进制文件的指针，且已经读到此文件末尾，      则函数feof(fp)的返回值为(   )。      A.EOF   B.非0值     C.0     D.NULL  13. C语言程序中，main函数的位置（   ）。  \tA.在开头     B.在结尾     C.在中间     D.可以任意  14. int x=3;       if(1<=2)      if(0)x=4;      else x=5;  \telse x=6; 执行上述语句后x的值是(   ).  \tA.3     B.4    C.5    D.6  15. 以下叙述正确的是(  )      A.goto语句只能用于退出多层循环。      B.可以用continue语句来终止switch语句的执行。      C.break语句只能用在循环体内和switch语句体中。      D.在循环内使用break语句和continue语句的作用相同。  16. 请问：下面这个程序段的输出是什么？(  )    int a＝7,b＝8,c＝9;    if(a<b)  {  a=b;  b=c;   c=a;   }    printf("a=%d b=%d c=%d\\n",a,b,c);  \tA . a=7 b=8 c=7     B. a=7 b=9 c=7     \tC. a=8 b=9 c=7     D. a=8 b=9 c=8   17．Ｃ语言对嵌套 if 语句的规定是：else总是与（ ）配对。   　A.其之前最近的 if       B.第一个 if     C.缩进位置相同的 if      D. 其之前最近且不带 else 的 if  18．有以下程序段：      int k=0;      while(k=1)  k++;      while循环执行的次数是(  )。      A．无限次        B.有语法错，不能执行      C. 一次也不执行     D.执行1次  19.若有程序段：double x=-5.9;int y;y=(int)x; 执行该段程序后(   )。      A.x=-5.9,y=-5       B.x=-5.9,y=-6       C.x=-5,y=-5        D.x=-6,y=-6  20．已知 int b; 则对指针变量正确的说明和初始化是: (   ).      A.int *p=b;  B.int p=b;  C.int p=&b;  D.int *p=&b;  21、C语言规定,在一个源程序中main函数的位置（\t\t）。      A) 必须在最开始      B) 必须在系统调用的库函数的后面           C) 可以任意\t\t\tD) 必须在最后  22、C语言程序的基本单位是（\t\t）。      A) 程序行       B) 语句       C) 函数       D) 字符  23、下列符号串中符合C语言语法的标识符是（\t     \t  ）。  \tA) _ab　　      B)if          C) a.9　　    D) 2fo  24、在C语言中，要求运算的数必须是整数的运算符是（\t\t）。  \tA) /　　        B)！　   \t   C) %　　\t\tD)==  25、有输出语句：printf(“x=%d, y=%f”, x, y); 若变量x,y的值分别为1，2.0,  \t则屏幕上输出正确形式应当是（\t\t）。  \tA) 1 2.0   B) x=1, y=2.000000  C) x=1, y=2  D) x=1 x=2.0  26、下列属于整型常量的是（\t\t   ）。  \tA) 12\t\t\tB)12.0 \t  C)-12.0     D)10E10  27、下面的变量定义中正确的是（\t\t ）。  \tA) int：a， b， c；  B) int  a； b； c；         C) int  a， b， c   D) int  a， b， c；  28、C语言中非空的基本数据类型包括（\t\t ）。  \tA) 整型,实型,逻辑型 \t B) 整型,实型,字符型\t      C) 整型,字符型,逻辑型    D) 整型,实型,逻辑型,字符型  29、对二维数组的正确定义是（\t\t）。      A）int a[ ] [ ]={1,2,3,4,5,6};        \tB）int a[2] [ ]={1,2,3,4,5,6};      C）int a[ ] [3]={1,2,3,4,5,6};        \tD）int a[2,3]={1,2,3,4,5,6};  30、字符(char)型数据在微机内存中的存储形式是（\t\t  ）。  \tA) 反码  \t\tB) 补码  \t  C) EBCDIC码 \t  D) ASCII码  31、已知int i=65;则putchar(i);printf("%d",i); printf("%c",i);  \t的输出结果为（\t      \t）。  \tA) A,65,A        B) 65,65,A         C) A,A,65    \t  D) A,A,A  32、语句 int *p,说明了（\t\t  ）。  \tA) p是指向一位数组的指针          B) P是指向函数的指针，该函数返回一个int型数据  \tC) P是指向int型数据的指针        D) p是函数名，该函数返回一个指向int型数据的指针  33、C语言中规定,else总是与（         ）的 if 组成配对关系。  \tA) 缩进距离相等       B）  前面一行上            C） 同一行上      D） 在它前面距离最近且未与其它else配对  34、若有说明语句：int  a [3][4]；则对a数组元素的正确引用是（     \t  ）。  \tA）a[2][4]       B）a[1,3]   　        C）a[2][2]   　 D）a(2)(1)  35、如果int a=3,b=4；则条件表达式"a<b? a:b"的值是（   \t  ）。   \tA) 3            B) 4            C) 0            D) 1  36、在C语言中，函数的数据类型是指（     \t  ）。      A) 函数返回值的数据类型           B) 函数形参的数据类型      C) 调用该函数时的实参的数据类型   D)任意指定的数据类型  37、若变量已正确定义，表达式（j=3，j++）的值是（     \t  ）。  \tA) 0       \t     B) 3                   C) 4                D) 5  38、C语言程序的3种基本结构是（     \t  ）。      A）顺序结构、选择结构和循环结构       B）递归结构、循环结构和转换结构      C）嵌套结构、递归结构和顺序结构       D）循环结构、转移结构和顺序结构  39、对do-while语言错误的说法是（         ）。  \tA）可构成多重循环结构   B）循环次数不可能为0          C）循环次数可能为0  \tD）先执行后判断  40、C语言中，关系表达式和逻辑表达式的值是（     \t  ）。   \tA) 0          B) 0或1            C) 1           D) ‘T’或’F’  41．以下描述正确的是（      ）      A．goto语句只能用于退缩出多层循环。      B．switch语句中不能出现continue语句。      C．只能用continue语句中来终止本次循环。      D．在循环语句中break语句不独立出现。  42.一个C程序的执行是从（    ）  \tA．C程序的main函数开始，到main函数结束。  \tB．本程序的第一个函数开始，到本程序最后一个函数结束。  \tC．本程序的main函数开始，到本程序文件的最后一个函数结束。  \tD．本程序的第一个函数开始，到本程序main函数结束。  43．C语言中，要求运算数必须都是整数的运算符是（    ）。  \tA.* \t\t  B.- \t\tC.% \t\tD.+  44．假定 int i=3,j=4; 执行语句: printf("%d,%d,%d\\n",i+++j,i,j); 之后，  \t其输出结果为：（    ）      A.7,4,4\t   B. 8,4,4\t  C. 7,3,4\t  D.7,3,5  45．对break语句的正确描述。（　     ）      A．break语句在while语句中，立即终止执行while语句。      B．break语句不能用于循环语句之外的语句。      C．break语句与continue语句功能相同。      D．break语句可以带参数，也可以不带。  46．在C语言中,下面那一个不是正确的概念(     )      A. 所有循环语句都要求至少要执行一次循环体。      B. goto和if语句能构成循环语句。      C．循环过程只能包含，不能交叉。      D．循环体可以是一条语句。  47．以下对二维数组a的正确说明是（     ）      Ａ. int a[ 3 ] [  ];           B. float a( 3, 4);          C. int a[ 3 ] [ 4 ]            D.float a( 3, )( 4 );  48．对函数的正确描述（\t\t）      A．在Ｃ语言中可以嵌套定义函数。      B．自定义函数和调用函数可以不在一个源文件中。      C． 函数定义都是平行的，独立的。      D． 不能嵌套调用函数。  49．若用数组名作为函数调用的实参，传给形参的是（       ）      A．数组的首地址                 B.数组的第一个元素值      C．数组的全部元素值             D．数组中元素的个数  50．对于 int *p; int a[]; p=a; 的合法运算(        )      A． a++;      B． p=a; p++; 相当于 a++;      C． ++p; 相当于 a[1];      D． 若p中的地址为100则p++; 运算后，则其值为100  51．假设　int x[] = {1,3,5,7,9,11}, *ptr; ptr = x;   \t以下那些是对数组元素的正确引用 (\t\t)  \tA． *(ptr--)\t    B． x[6]\t    C． *(--ptr)\t     D． *(ptr++)  52．执行以下语句后的结果为（　　　）       enum weekday {sun,mon=3,tue,wed,thu};       enum weekday workday;       workday = wed;       printf("%d\\n",workday);  \tA．5\t    \tB. 3\t\t  C.4\t\t   D.编译出错  53．要定义一个结构体类型拟包含两个成员，其中成员变量info用来存放整型数据，成员变量link是指向自身结构体的指针。则下面的定义正确的是(       )。      A.struct node{int info;struct node link;};       B.struct node{int info;node *link;};      C.struct node{int info;struct *link;};        D.struct node{int info;struct node *link;};  54．以下与函数fseek(fp,0L,SEEK_SET)有相同作用的是(      )。  \tA.feof(fp)  \t\tB.ftell(fp)  \t\t      C.fgetc(fp)  \t\tD.rewind(fp)  55．局部变量的作用域（\t      \t）       A．在定义的块内有效。         B．在函数外也有效。  \t C．在本文件内有效。           D．在所有文件内有效。    ```        ## 填空题    ```C  1、int x = 8; printf(“%d”,x >> 1); 程序运行结果为 _____   2、unsigned short s = 65536; int i = s; 程序运行最后 i 的值为 _____     3、int a=1,b=2,c; c = a < b ? a : b;  程序执行后 c 的值为 ____    4、int a; int *p; p = &a;  &是什么作用 _________    5、int a; int *p; p = &a;  *是什么作用 _________    6、int x = 5; printf(“%d”,x & 1);  程序运行结果为 _____     7、int a = 5, b = 10,c,d; c = a++; d = ++b;  c的值为___ d的值为 ____     8、int x =  -10；y = x % 3;  y的值为 ____    9、表达式 3 > 2 > 1 的结果为 ____   10、选择结构有 _________ 和 ________ 两种语句  11、如果定义一个二维数组float  s[5][3]; 数组s的元素个数是___________，      最后一个元素为___________.  12、在C语言中，整型常量的书写形式包括：八进制、十进制和___________进制.  13、若定义了int  x=15, y=5;则printf(“%d\\n”, x%=(y%=2));  \t的输出结果为___________.  14、若有定义int a=12,n=5,则表达式a%n运算后,a的值___________.  15、若定义了int  x；float y;那么表达式x+y的类型为___________.  16、设int a=9,b=20;则printf("%d,%d\\n",a--,--b);的输出结果为___________.  17、在C语言中，一个单精度型变量在内存占用的字节数是___________.  18、已知int a=8;则表达式a+=a-=a*=a的结果是___________ .  19、在C程序中, 注释以___________符号开始，使用___________符号结束。  20、表达式3>2>1的结果为___________.    ```            ## 程序分析题    ```C  1、以下程序 输出结果是什么?  void main( )\t\t\t\t\t\t\t\t\t  {      printf("%d %x %o\\n",125,125,125);      printf("%d %x %o\\n",045,045,045);      printf("%d %x %o\\n",0x32,0x32,0x32);  }    2、以下程序运行结果是什么?  void main()  {         int a=2;      switch(a)      {                case 2:          case 3:a++;          case 4:a++;          default:a+=10;      }      printf("a=%d\\n",a);  }      3、以下程序运行结果是什么?  void main()  {      int i = 97;      char a = ‘a’;      printf(“%d,%c\\n”, i,a);      printf(“%d”,i > a > ‘a’ );  }    4、#include <stdio.h>  void main( )  {\t      int  i, j, k ;  \ti=1;  \tj=1;  \tk=i+++j ;  \tprintf("i=%d, j=%d, k=%d\\n", i, j, k );  }  该程序的运行结果是__________________________________________.  5、#include <stdio.h>  void main( )  {\tint  a=2, b=1, c=2;   \tif  (a)    \tif ( b<0 ) c=0;   \telse  c++;  \tprintf("%d\\n",c );  }  该程序的运行结果是__________________________________________.  6、#include <stdio.h>  void main( )  {\t      char  a[10]={ "Boy\\0abc"};  \tprintf("%s", a );  \tprintf("\\n");  }    该程序的运行结果是__________________________________________.  7、#include <stdio.h>  void main()  { \tint i=1,sum=0;  \t\tdo{  \t\tsum+=i++;  \t\t}while(i<6);  \t\tprintf("%d\\n",sum);  }       该程序的运行结果是__________________________________________.  8、#include <stdio.h>  void main()  {  \tint a[10]={1,2,3,4,5,6,7,8,9,10},*p=a;  \tprintf("%d\\n",*(p+2));  }  该程序的运行结果是__________________________________________.  9、#include <stdio.h>  void main()  {   \tint a=1,b=0;  \tswitch(a)  \t{  \t\tcase 1:  \t\tswitch(b)  \t\t{  \t\t\tcase 0:printf("**0**"); break;  \t\t\tcase 1:printf("**1**"); break;  \t\t}  \t\tcase 2:printf("**2**");break;  \t}  }  该程序的运行结果是__________________________________________  10、 main()  {   \tint a=1,b=0;  \tscanf("%d",&a);  \tswitch(a)  \t{  \tcase 1:b=1;break;  \tcase 2:b=2;break;  \tdefault:b=10;  \t}  \tprintf("%d\\n",b);  }  若在屏幕上输入5，该程序的运行结果是___________。  11、main( )  {   \tint i=1,j=2,k=3;  \tif(i++==1 && (++j==3 || k++==3))  \tprintf("%d %d %d\\n",i,j,k);  }  该程序的运行结果是_____________________________。  12、main ()  {      char s[]=“abcdef”;      s[3]=‘\\0’;      printf(“%s\\n”,s);  }      该程序的运行结果是_____________________________。  13、main()  {       int i=1,sum=0;      do      {sum+=i++;}       while(i<6);       printf("%d\\n",sum);  }  该程序的运行结果是_________________________________。  14、main()  {      int a[10]={1,2,3,4,5,6,7,8,9,10},*p=a;      printf("%d\\n",*(p+2));  }    该程序的运行结果是__________________________________。  15、main()  {   \tchar a[10]="abcd";  \tprintf("%d,%d\\n",strlen(a),sizeof(a));  }  若在屏幕输入1时，该程序的运行结果是________________________________    ```        ## 程序设计题    ```C  1、输出所有的“水仙花数”，所谓“水仙花数”是指一个3位整数，其各位数字立方和等于该数本身。例如，153是一个水仙花数，因为153=13+53+33    2、输出九九乘法表  1*1=1  1*2=2 2*2=4  1*3=3 2*3=6 3*3=9  1*4=4 2*4=8 3*4=12 4*4=16  1*5=5 2*5=10 3*5=15 4*5=20  1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36  1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42  1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64  1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81    3、键盘输入一个年份，输出该年是平年还是 闰年        4、编程实现，输入两个数按从大到小的顺序输出。  5、编程实现，求100~300间能被9整除的数，请分别打印出每个数，并且求其和。  6、有三个正整数，其和为30，第1个数、两倍的第2个数和四倍的第3个数三者的和为88，      第1个数与第2个数的和的两倍减去第3个数的三倍为-15.编程求这三个数  7、编程实现，求1到100的和。      ```    '}]}}]);